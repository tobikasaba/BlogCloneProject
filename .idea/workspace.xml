<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="1333fd79-5334-4886-972e-c98b64258d05" name="Changes" comment="Implement blog views and URL routing for post management&#10;&#10;- Added class-based views for blog functionality, including PostListView, PostDetailView, PostCreateView, PostUpdateView, PostDeleteView, and DraftListView.&#10;- Integrated LoginRequiredMixin to restrict access to certain views for authenticated users.&#10;- Defined custom queryset methods to filter and display published and draft posts.&#10;- Configured URL patterns for all blog views, including paths for listing, creating, updating, and deleting posts.&#10;- Added an AboutView for static content display.&#10;- Ensured proper redirection after login and post actions using success_url and redirect_field_name attributes.&#10;- crated base and about html templates">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/mysite/blog/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/mysite/blog/urls.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/mysite/blog/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/mysite/blog/views.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DjangoConsoleOptions" custom-start-script="import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)">
    <option name="myCustomStartScript" value="import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
        <option value="CSS File" />
        <option value="HTML File" />
      </list>
    </option>
  </component>
  <component name="FormatOnSaveOptions">
    <option name="myRunOnSave" value="true" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;tobikasaba&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/tobikasaba/BlogCloneProject.git&quot;,
    &quot;accountId&quot;: &quot;c3b871f9-f1d6-4dbe-9faf-7eb230aa94ac&quot;
  }
}</component>
  <component name="OptimizeOnSaveOptions">
    <option name="myRunOnSave" value="true" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="2oD8i83Mx2DCH5pLq99wjq6vBt8" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "DefaultHtmlFileTemplate": "HTML File",
    "RunOnceActivity.OpenDjangoStructureViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "git-widget-placeholder": "main",
    "list.type.of.created.stylesheet": "CSS",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "actions.on.save",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/mysite/blog" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="BlogCloneProject" type="Python.DjangoServer" factoryName="Django server">
      <module name="BlogCloneProject" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="launchJavascriptDebuger" value="false" />
      <option name="port" value="8000" />
      <option name="host" value="localhost" />
      <option name="additionalOptions" value="" />
      <option name="browserUrl" value="" />
      <option name="runTestServer" value="false" />
      <option name="runNoReload" value="false" />
      <option name="useCustomRunCommand" value="false" />
      <option name="customRunCommand" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23726.102" />
        <option value="bundled-python-sdk-5e1850174b45-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23726.102" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="1333fd79-5334-4886-972e-c98b64258d05" name="Changes" comment="" />
      <created>1730392909400</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730392909400</updated>
      <workItem from="1730392922428" duration="10625000" />
      <workItem from="1730409792099" duration="25193000" />
    </task>
    <task id="LOCAL-00001" summary="Settings up django project for blog">
      <option name="closed" value="true" />
      <created>1730394426847</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1730394426847</updated>
    </task>
    <task id="LOCAL-00002" summary="feat: Add Post and Comment models to blog app&#10;&#10;- Created Post model with fields for author, title, text, create_date, and optional published_date.&#10;- Added `publish` method to set published_date and save the post.&#10;- Defined `approve_comments` method to filter for approved comments.&#10;- Implemented `get_absolute_url` in Post to direct users to post_detail view after creation.&#10;&#10;- Created Comment model with fields for post, author, text, create_date, and approved_comments.&#10;- Added `approve` method to set comment approval status.&#10;- Implemented `get_absolute_url` in Comment to redirect to post_list view after comment creation.&#10;&#10;This setup links comments to specific posts, enables publishing and approving posts/comments, and configures URL redirects upon creation.">
      <option name="closed" value="true" />
      <created>1730405256248</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1730405256248</updated>
    </task>
    <task id="LOCAL-00003" summary="Add forms for Post and Comment models with custom widget styling&#10;&#10;- Created PostForm and CommentForm classes in forms.py&#10;- Configured Meta classes for Post and Comment to specify model fields&#10;- Applied custom CSS classes to widgets for 'title', 'text', and 'author' fields to support styling with CSS&#10;- Enables customized form input appearance and enhances UI consistency&#10;&#10;settings.py&#10;- Set up template and static folder paths in settings.py&#10;- included login redirect url">
      <option name="closed" value="true" />
      <created>1730473014630</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1730473014630</updated>
    </task>
    <task id="LOCAL-00004" summary="Implement blog views and URL routing for post management&#10;&#10;- Added class-based views for blog functionality, including PostListView, PostDetailView, PostCreateView, PostUpdateView, PostDeleteView, and DraftListView.&#10;- Integrated LoginRequiredMixin to restrict access to certain views for authenticated users.&#10;- Defined custom queryset methods to filter and display published and draft posts.&#10;- Configured URL patterns for all blog views, including paths for listing, creating, updating, and deleting posts.&#10;- Added an AboutView for static content display.&#10;- Ensured proper redirection after login and post actions using success_url and redirect_field_name attributes.&#10;- crated base and about html templates">
      <option name="closed" value="true" />
      <created>1730645069265</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1730645069265</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Settings up django project for blog" />
    <MESSAGE value="feat: Add Post and Comment models to blog app&#10;&#10;- Created Post model with fields for author, title, text, create_date, and optional published_date.&#10;- Added `publish` method to set published_date and save the post.&#10;- Defined `approve_comments` method to filter for approved comments.&#10;- Implemented `get_absolute_url` in Post to direct users to post_detail view after creation.&#10;&#10;- Created Comment model with fields for post, author, text, create_date, and approved_comments.&#10;- Added `approve` method to set comment approval status.&#10;- Implemented `get_absolute_url` in Comment to redirect to post_list view after comment creation.&#10;&#10;This setup links comments to specific posts, enables publishing and approving posts/comments, and configures URL redirects upon creation." />
    <MESSAGE value="Add forms for Post and Comment models with custom widget styling&#10;&#10;- Created PostForm and CommentForm classes in forms.py&#10;- Configured Meta classes for Post and Comment to specify model fields&#10;- Applied custom CSS classes to widgets for 'title', 'text', and 'author' fields to support styling with CSS&#10;- Enables customized form input appearance and enhances UI consistency&#10;&#10;settings.py&#10;- Set up template and static folder paths in settings.py&#10;- included login redirect url" />
    <MESSAGE value="Implement blog views and URL routing for post management&#10;&#10;- Added class-based views for blog functionality, including PostListView, PostDetailView, PostCreateView, PostUpdateView, PostDeleteView, and DraftListView.&#10;- Integrated LoginRequiredMixin to restrict access to certain views for authenticated users.&#10;- Defined custom queryset methods to filter and display published and draft posts.&#10;- Configured URL patterns for all blog views, including paths for listing, creating, updating, and deleting posts.&#10;- Added an AboutView for static content display.&#10;- Ensured proper redirection after login and post actions using success_url and redirect_field_name attributes.&#10;- crated base and about html templates" />
    <option name="LAST_COMMIT_MESSAGE" value="Implement blog views and URL routing for post management&#10;&#10;- Added class-based views for blog functionality, including PostListView, PostDetailView, PostCreateView, PostUpdateView, PostDeleteView, and DraftListView.&#10;- Integrated LoginRequiredMixin to restrict access to certain views for authenticated users.&#10;- Defined custom queryset methods to filter and display published and draft posts.&#10;- Configured URL patterns for all blog views, including paths for listing, creating, updating, and deleting posts.&#10;- Added an AboutView for static content display.&#10;- Ensured proper redirection after login and post actions using success_url and redirect_field_name attributes.&#10;- crated base and about html templates" />
  </component>
</project>